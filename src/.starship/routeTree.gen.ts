/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './../galaxies/__root'

// Create Virtual Routes

const TodoListIndexLazyImport = createFileRoute('/todo-list/')()
const FormIndexLazyImport = createFileRoute('/form/')()
const BaseListIndexLazyImport = createFileRoute('/base-list/')()

// Create/Update Routes

const TodoListIndexLazyRoute = TodoListIndexLazyImport.update({
  id: '/todo-list/',
  path: '/todo-list/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./../galaxies/todo-list/index.lazy').then((d) => d.Route),
)

const FormIndexLazyRoute = FormIndexLazyImport.update({
  id: '/form/',
  path: '/form/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./../galaxies/form/index.lazy').then((d) => d.Route),
)

const BaseListIndexLazyRoute = BaseListIndexLazyImport.update({
  id: '/base-list/',
  path: '/base-list/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./../galaxies/base-list/index.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/base-list/': {
      id: '/base-list/'
      path: '/base-list'
      fullPath: '/base-list'
      preLoaderRoute: typeof BaseListIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/form/': {
      id: '/form/'
      path: '/form'
      fullPath: '/form'
      preLoaderRoute: typeof FormIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/todo-list/': {
      id: '/todo-list/'
      path: '/todo-list'
      fullPath: '/todo-list'
      preLoaderRoute: typeof TodoListIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/base-list': typeof BaseListIndexLazyRoute
  '/form': typeof FormIndexLazyRoute
  '/todo-list': typeof TodoListIndexLazyRoute
}

export interface FileRoutesByTo {
  '/base-list': typeof BaseListIndexLazyRoute
  '/form': typeof FormIndexLazyRoute
  '/todo-list': typeof TodoListIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/base-list/': typeof BaseListIndexLazyRoute
  '/form/': typeof FormIndexLazyRoute
  '/todo-list/': typeof TodoListIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/base-list' | '/form' | '/todo-list'
  fileRoutesByTo: FileRoutesByTo
  to: '/base-list' | '/form' | '/todo-list'
  id: '__root__' | '/base-list/' | '/form/' | '/todo-list/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  BaseListIndexLazyRoute: typeof BaseListIndexLazyRoute
  FormIndexLazyRoute: typeof FormIndexLazyRoute
  TodoListIndexLazyRoute: typeof TodoListIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  BaseListIndexLazyRoute: BaseListIndexLazyRoute,
  FormIndexLazyRoute: FormIndexLazyRoute,
  TodoListIndexLazyRoute: TodoListIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/base-list/",
        "/form/",
        "/todo-list/"
      ]
    },
    "/base-list/": {
      "filePath": "base-list/index.lazy.tsx"
    },
    "/form/": {
      "filePath": "form/index.lazy.tsx"
    },
    "/todo-list/": {
      "filePath": "todo-list/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
